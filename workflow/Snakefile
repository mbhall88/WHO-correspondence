from pathlib import Path
from typing import Dict, Set
import pandas as pd


# =====================================
# Workflow config items
configfile: "config/config.yaml"


samplesheet = pd.read_csv(config["samplesheet"], index_col="run")
containers: Dict[str, str] = config["containers"]
# =====================================

# =====================================
# Constants for workflow
GB = 1_024
env_dir = Path("workflow/envs").resolve()
rules_dir = Path("workflow/rules").resolve()
scripts_dir = Path("workflow/scripts").resolve()
log_dir = Path("logs/stderr")
data_dir = Path("data").resolve()
decontam_db = data_dir / "decontam_db"
results = Path("results").resolve()
panel_dir = results / "panel"
h37rv = Path(config["reference"]).resolve()
annotation = Path(config["genbank"]).resolve()
features = Path(config["features"]).resolve()
full_panel = Path(config["full_panel"]).resolve()
GRADES = config["grades"]
PANELS = ["hunt2019", "who2021", "hall2022"]
# =====================================

# =====================================
RUNS = list(samplesheet.index)
SAMPLES = list(samplesheet["biosample"])
PROJECTS = list(samplesheet["bioproject"])

# Generate the set of required output files from the pipeline
output: Set[Path] = set()

for panel in PANELS:
    output.add(results / f"amr_predictions/{panel}.csv")

output.add(results / "qc.csv")
# =====================================


rule all:
    input:
        output,


localrules: qc_summary


include: rules_dir / "panel.smk"
#include: rules_dir / "download.smk"
include: rules_dir / "qc.smk"
include: rules_dir / "amr.smk"
